/**
 * Smart Itinerary API v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

const ItineraryBuilder = require('../services/entities/itineraryBuilder');

module.exports = async (req, res) => {
  try {
    console.log('üöÄ Smart Itinerary API v2 - New Architecture');
    console.log('Request body:', req.body);

    const { city, audience, interests, date, budget } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!city || !audience || !interests || !date || !budget) {
      return res.status(400).json({
        error: 'Missing required parameters',
        required: ['city', 'audience', 'interests', 'date', 'budget']
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞
    const filterParams = {
      city,
      audience,
      interests: Array.isArray(interests) ? interests : [interests],
      date,
      budget: parseInt(budget)
    };

    console.log('Filter params:', filterParams);

    // –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
    const itineraryBuilder = new ItineraryBuilder();

    // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
    const itinerary = await itineraryBuilder.buildItinerary(filterParams);

    console.log('‚úÖ Itinerary built successfully');
    console.log('Title:', itinerary.title);
    console.log('Locations count:', itinerary.daily_plan[0].blocks.length);

    res.json(itinerary);

  } catch (error) {
    console.error('Error in smart itinerary v2:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message,
      architecture: 'modular_v2'
    });
  }
};
