/**
 * Creative Itinerary Builder - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
 * –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º itineraryRules.js
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Places API
 * –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –¥–∞–Ω–Ω—ã–µ
 */

const ItineraryRules = require('../rules/itineraryRules');
const { generateTitle, generateSubtitle, generateWeather, generateLocationDescription, generateLocationTips } = require('../textGenerator');
const PlacesService = require('../placesService');

class CreativeItineraryBuilder {
  constructor() {
    this.itineraryRules = new ItineraryRules();
    this.placesService = new PlacesService();
  }

  /**
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°—Ç—Ä–æ–∏—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
   * @param {Object} filterParams - –§–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≥–æ—Ä–æ–¥, –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –¥–∞—Ç–∞, –±—é–¥–∂–µ—Ç
   * @returns {Object} - –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async buildCreativeItinerary(filterParams) {
    console.log('üé® CREATIVE ITINERARY BUILDER - New Architecture');
    console.log('üìã Filter params:', filterParams);

    // –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const rules = this.itineraryRules.getAllRules();
    const recommendations = this.itineraryRules.getItineraryRecommendations(filterParams);
    console.log('üìú Rules and recommendations loaded:', recommendations.length);

    // –®–ê–ì 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —á–µ—Ä–µ–∑ OpenAI
    const [title, subtitle, weather] = await Promise.all([
      generateTitle(filterParams.city, filterParams.interests, filterParams.audience),
      generateSubtitle(filterParams.city, filterParams.interests, filterParams.audience, filterParams.date),
      generateWeather(filterParams.city, filterParams.interests, filterParams.date)
    ]);
    console.log('‚ú® Creative texts generated:', { title });

    // –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google Places API
    const realPlaces = await this.getRealPlacesFromGoogleAPI(filterParams, rules);
    console.log('üåç Real places from Google API:', realPlaces.length);

    if (realPlaces.length === 0) {
      throw new Error(`No real places found for ${filterParams.city}. Google Places API returned no results.`);
    }

    // –®–ê–ì 4: –°–æ–∑–¥–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –¥–Ω—è —Å OpenAI
    const creativeItinerary = await this.createCreativeDayPlan(filterParams, realPlaces, rules, recommendations);
    console.log('üéØ Creative day plan created');

    // –®–ê–ì 5: –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    const finalItinerary = {
      meta: {
        city: filterParams.city,
        date: filterParams.date,
        audience: filterParams.audience,
        interests: filterParams.interests,
        budget: filterParams.budget,
        generated_at: new Date().toISOString(),
        architecture: 'creative_v3',
        data_source: 'google_places_only',
        rules_applied: recommendations.length
      },
      title: this.cleanText(title),
      subtitle: this.cleanText(subtitle),
      weather: {
        forecast: this.cleanText(weather.forecast || weather),
        clothing: this.cleanText(weather.clothing || ''),
        tips: this.cleanText(weather.tips || '')
      },
      budget: this.calculateRealBudget(creativeItinerary, filterParams.budget),
      daily_plan: [{
        blocks: creativeItinerary
      }]
    };

    console.log('‚úÖ Final creative itinerary assembled');
    return finalItinerary;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Google Places API
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ itineraryRules.js
   */
  async getRealPlacesFromGoogleAPI(filterParams, rules) {
    console.log('üîç Searching real places via Google Places API...');
    
    const allPlaces = [];
    const searchCategories = this.getSearchCategoriesFromRules(filterParams.interests, filterParams.audience, rules);
    
    console.log('üè∑Ô∏è Search categories:', searchCategories);

    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const category of searchCategories) {
      try {
        const places = await this.placesService.searchPlaces(
          filterParams.city, 
          category, 
          filterParams.interests
        );
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±—é–¥–∂–µ—Ç–∞
        const budgetFilteredPlaces = this.filterPlacesByBudget(places, filterParams.budget, rules);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–∫–ª—é—á–∞–µ–º –±–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π)
        const audienceFilteredPlaces = this.filterPlacesByAudience(budgetFilteredPlaces, filterParams.audience, rules);
        
        console.log(`üìç Found ${audienceFilteredPlaces.length} real places for category ${category}`);
        allPlaces.push(...audienceFilteredPlaces);
      } catch (error) {
        console.error(`‚ùå Error searching places for category ${category}:`, error.message);
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ place_id
    const uniquePlaces = this.removeDuplicatePlaces(allPlaces);
    console.log(`üéØ Total unique real places: ${uniquePlaces.length}`);

    return uniquePlaces;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
   */
  getSearchCategoriesFromRules(interests, audience, rules) {
    const categories = new Set();
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ–¥—ã (–∏–∑ –ø—Ä–∞–≤–∏–ª timeSlots)
    categories.add('restaurant');
    categories.add('cafe');
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–∏–∑ –ø—Ä–∞–≤–∏–ª interests)
    interests.forEach(interest => {
      const interestRules = rules.filterParameters.interests.rules[interest];
      if (interestRules) {
        const interestCategories = this.mapInterestToCategories(interest);
        interestCategories.forEach(cat => categories.add(cat));
      }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (–∏–∑ –ø—Ä–∞–≤–∏–ª balance)
    categories.add('tourist_attraction');
    categories.add('park');
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π (–∏–∑ –ø—Ä–∞–≤–∏–ª safety)
    if (audience === 'kids') {
      categories.delete('bar');
      categories.delete('night_club');
    }
    
    return Array.from(categories);
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Google Places
   */
  mapInterestToCategories(interest) {
    const mapping = {
      'culture': ['museum', 'art_gallery', 'library', 'cultural_center'],
      'adventure': ['amusement_park', 'zoo', 'tourist_attraction', 'park'],
      'romantic': ['park', 'tourist_attraction', 'spa', 'restaurant'],
      'food': ['restaurant', 'cafe', 'food', 'meal_takeaway'],
      'art': ['art_gallery', 'museum', 'cultural_center'],
      'music': ['night_club', 'bar', 'tourist_attraction'],
      'nature': ['park', 'zoo', 'tourist_attraction'],
      'history': ['museum', 'tourist_attraction', 'library'],
      'shopping': ['shopping_mall', 'store', 'clothing_store'],
      'nightlife': ['bar', 'night_club', 'restaurant'],
      'relaxation': ['spa', 'park', 'cafe'],
      'wellness': ['spa', 'gym', 'park'],
      'architecture': ['tourist_attraction', 'museum', 'church'],
      'photography': ['tourist_attraction', 'park', 'museum'],
      'local': ['restaurant', 'cafe', 'tourist_attraction'],
      'sports': ['stadium', 'gym', 'park'],
      'outdoor': ['park', 'tourist_attraction', 'zoo'],
      'indoor': ['museum', 'shopping_mall', 'art_gallery'],
      
      // –î–µ—Ç—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
      'swimming': ['swimming_pool', 'water_park', 'aquarium'],
      'zoo': ['zoo', 'aquarium', 'amusement_park'],
      'playground': ['amusement_park', 'park', 'zoo'],
      'amusement': ['amusement_park', 'zoo', 'tourist_attraction'],
      'science': ['museum', 'library', 'tourist_attraction'],
      'educational': ['museum', 'library', 'zoo']
    };
    
    return mapping[interest] || ['tourist_attraction'];
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–µ—Å—Ç–∞ –ø–æ –±—é–¥–∂–µ—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
   */
  filterPlacesByBudget(places, budget, rules) {
    const budgetRules = rules.budgetAndPricing;
    const budgetLevel = this.getBudgetLevel(budget);
    const strategies = budgetRules.budgetLevels[budgetLevel]?.strategies || [];
    
    console.log(`üí∞ Applying budget filter: ${budgetLevel} (${budget}‚Ç¨)`);
    
    return places.filter(place => {
      const estimatedCost = this.estimatePlaceCost(place);
      const maxCostForBudget = this.getMaxCostForBudget(budget);
      
      return estimatedCost <= maxCostForBudget;
    });
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–µ—Å—Ç–∞ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
   */
  filterPlacesByAudience(places, audience, rules) {
    console.log(`üë• Applying audience filter: ${audience}`);
    
    if (audience === 'kids') {
      // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –¥–µ—Ç–µ–π –º–µ—Å—Ç–∞
      return places.filter(place => 
        !place.types?.some(type => ['bar', 'night_club', 'casino', 'liquor_store'].includes(type)) &&
        place.rating >= 4.0 // –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π
      );
    }
    
    return places;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –¥–Ω—è —Å –ø–æ–º–æ—â—å—é OpenAI
   */
  async createCreativeDayPlan(filterParams, realPlaces, rules, recommendations) {
    console.log('üé® Creating creative day plan...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º timeSlots
    const timeSlots = this.createTimeSlotsFromRules(filterParams, rules);
    console.log('‚è∞ Time slots created:', timeSlots.length);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º uniqueness
    const usedPlaces = new Set();
    const dailyPlan = [];
    
    for (const slot of timeSlots) {
      console.log(`üéØ Processing slot ${slot.time} - ${slot.category}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–ª–æ—Ç–∞
      const suitablePlaces = realPlaces.filter(place => 
        this.isPlaceSuitableForSlot(place, slot) && 
        !usedPlaces.has(place.place_id || place.name)
      );
      
      console.log(`üéØ Slot ${slot.time} (${slot.category}): found ${suitablePlaces.length} suitable places from ${realPlaces.length} total`);
      
      if (suitablePlaces.length === 0) {
        console.log(`‚ö†Ô∏è No suitable real places for slot ${slot.time} - ${slot.category}`);
        console.log(`Available places: ${realPlaces.slice(0, 3).map(p => `${p.name} (${p.types?.join(',') || p.category})`).join(', ')}`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –æ—Ç–∑—ã–≤–∞–º)
      const selectedPlace = this.selectBestPlace(suitablePlaces, filterParams);
      usedPlaces.add(selectedPlace.place_id);
      
      console.log(`‚úÖ Selected: ${selectedPlace.name} (rating: ${selectedPlace.rating})`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã
      const [description, tips] = await Promise.all([
        generateLocationDescription(
          selectedPlace.name,
          selectedPlace.formatted_address || selectedPlace.vicinity,
          slot.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `Discover the authentic charm of ${selectedPlace.name}.`),
        generateLocationTips(
          selectedPlace.name,
          slot.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `Perfect spot to experience local culture.`)
      ]);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      const photos = await this.getRealPhotos(selectedPlace);
      
      dailyPlan.push({
        time: slot.time,
        title: slot.title,
        items: [{
          title: selectedPlace.name,
          why: this.cleanText(description),
          address: selectedPlace.formatted_address || selectedPlace.vicinity,
          lat: selectedPlace.geometry?.location?.lat,
          lng: selectedPlace.geometry?.location?.lng,
          approx_cost: this.formatCost(this.estimatePlaceCost(selectedPlace)),
          tips: this.cleanText(tips),
          duration: this.getDurationForCategory(slot.category, rules),
          photos: photos,
          rating: selectedPlace.rating,
          place_id: selectedPlace.place_id,
          source: 'google_places_real_data'
        }]
      });
    }
    
    console.log(`üéØ Created ${dailyPlan.length} real activities`);
    return dailyPlan;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
   */
  createTimeSlotsFromRules(filterParams, rules) {
    const timeSlotRules = rules.routeLogic.timeSlots;
    const slots = [];
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –µ–¥—ã
    slots.push(
      { time: "08:30", category: "cafe", title: "Morning Coffee" },
      { time: "13:00", category: "restaurant", title: "Lunch" },
      { time: "19:30", category: "restaurant", title: "Dinner" }
    );
    
    // –°–ª–æ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    filterParams.interests.forEach(interest => {
      const interestSlots = this.getActivitySlotsForInterest(interest, filterParams.audience);
      slots.push(...interestSlots);
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return this.deduplicateTimeSlots(slots.sort((a, b) => a.time.localeCompare(b.time)));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
   */
  getActivitySlotsForInterest(interest, audience) {
    const slots = {
      'culture': [
        { time: "10:00", category: "museum", title: "Cultural Morning" },
        { time: "15:00", category: "art_gallery", title: "Art Experience" }
      ],
      'adventure': [
        { time: "10:00", category: "amusement_park", title: "Adventure Time" },
        { time: "16:00", category: "tourist_attraction", title: "Exploration" }
      ],
      'romantic': [
        { time: "10:30", category: "park", title: "Romantic Walk" },
        { time: "16:00", category: "tourist_attraction", title: "Scenic Views" },
        { time: "21:00", category: "bar", title: "Evening Drinks" }
      ],
      'swimming': [
        { time: "10:00", category: "swimming_pool", title: "Swimming Fun" },
        { time: "15:00", category: "water_park", title: "Water Activities" }
      ],
      'zoo': [
        { time: "10:00", category: "zoo", title: "Animal Adventure" },
        { time: "15:00", category: "aquarium", title: "Marine Life" }
      ]
    };
    
    let interestSlots = slots[interest] || [
      { time: "10:00", category: "tourist_attraction", title: "Morning Activity" },
      { time: "15:00", category: "tourist_attraction", title: "Afternoon Activity" }
    ];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–ª—è –¥–µ—Ç–µ–π
    if (audience === 'kids') {
      interestSlots = interestSlots.filter(slot => !['bar', 'night_club'].includes(slot.category));
    }
    
    return interestSlots;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è —Å–ª–æ—Ç–∞
   */
  isPlaceSuitableForSlot(place, slot) {
    if (!place.types || !Array.isArray(place.types)) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∏–ø–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç–∞ (–¥–ª—è mock –¥–∞–Ω–Ω—ã—Ö)
      return place.category === slot.category;
    }
    
    const categoryMapping = {
      'cafe': ['cafe', 'bakery', 'restaurant', 'meal_takeaway', 'food'],
      'restaurant': ['restaurant', 'meal_delivery', 'meal_takeaway', 'food', 'cafe'],
      'museum': ['museum', 'art_gallery', 'library', 'cultural_center'],
      'park': ['park', 'zoo', 'tourist_attraction'],
      'tourist_attraction': ['tourist_attraction', 'point_of_interest', 'establishment'],
      'amusement_park': ['amusement_park', 'zoo', 'aquarium', 'tourist_attraction'],
      'swimming_pool': ['swimming_pool', 'gym', 'spa', 'health'],
      'water_park': ['amusement_park', 'swimming_pool', 'tourist_attraction'],
      'zoo': ['zoo', 'aquarium', 'tourist_attraction'],
      'aquarium': ['aquarium', 'zoo', 'tourist_attraction'],
      'art_gallery': ['art_gallery', 'museum', 'cultural_center'],
      'bar': ['bar', 'night_club', 'restaurant', 'food', 'establishment']
    };
    
    const acceptableTypes = categoryMapping[slot.category] || [slot.category];
    const hasMatchingType = place.types.some(type => acceptableTypes.includes(type));
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç–∞ (–¥–ª—è mock –¥–∞–Ω–Ω—ã—Ö)
    const hasCategoryMatch = place.category === slot.category;
    
    console.log(`üîç Checking place ${place.name}: types=${place.types?.join(',')}, category=${place.category}, slot=${slot.category}, match=${hasMatchingType || hasCategoryMatch}`);
    
    return hasMatchingType || hasCategoryMatch;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –æ—Ç–∑—ã–≤–∞–º
   */
  selectBestPlace(places, filterParams) {
    return places.sort((a, b) => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–π—Ç–∏–Ω–≥ > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ > –æ—Ç–∫—Ä—ã—Ç–æ —Å–µ–π—á–∞—Å
      const scoreA = (a.rating || 0) * 10 + (a.user_ratings_total || 0) / 100 + (a.opening_hours?.open_now ? 5 : 0);
      const scoreB = (b.rating || 0) * 10 + (b.user_ratings_total || 0) / 100 + (b.opening_hours?.open_now ? 5 : 0);
      return scoreB - scoreA;
    })[0];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Å—Ç–∞
   */
  async getRealPhotos(place) {
    try {
      if (place.place_id) {
        return await this.placesService.getPlacePhotos(place.place_id);
      }
      return [];
    } catch (error) {
      console.error('Error getting real photos:', error);
      return [];
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  cleanText(text) {
    if (!text) return text;
    return text.replace(/^[\"']|[\"']$/g, '').trim();
  }

  removeDuplicatePlaces(places) {
    const seen = new Set();
    return places.filter(place => {
      const id = place.place_id || place.name;
      if (seen.has(id)) return false;
      seen.add(id);
      return true;
    });
  }

  deduplicateTimeSlots(slots) {
    const seen = new Set();
    return slots.filter(slot => {
      if (seen.has(slot.time)) return false;
      seen.add(slot.time);
      return true;
    });
  }

  getBudgetLevel(budget) {
    const budgetValue = parseInt(budget) || 0;
    if (budgetValue < 50) return 'low';
    if (budgetValue < 150) return 'medium';
    return 'high';
  }

  getMaxCostForBudget(budget) {
    const budgetValue = parseInt(budget) || 100;
    return Math.floor(budgetValue * 0.3); // –ú–∞–∫—Å–∏–º—É–º 30% –æ—Ç –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ–¥–Ω–æ –º–µ—Å—Ç–æ
  }

  estimatePlaceCost(place) {
    if (place.price_level) {
      return place.price_level * 15; // ‚Ç¨15, ‚Ç¨30, ‚Ç¨45, ‚Ç¨60
    }
    
    // –û—Ü–µ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É –º–µ—Å—Ç–∞
    if (place.types?.includes('restaurant')) return 25;
    if (place.types?.includes('cafe')) return 8;
    if (place.types?.includes('museum')) return 12;
    if (place.types?.includes('bar')) return 15;
    if (place.types?.includes('amusement_park')) return 30;
    
    return 10; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
  }

  formatCost(cost) {
    return `${cost}‚Ç¨`;
  }

  getDurationForCategory(category, rules) {
    const durationRules = rules.routeLogic.duration.rules;
    
    if (category === 'restaurant') return '1.5 hours';
    if (category === 'cafe') return '1 hour';
    if (category === 'museum') return '2 hours';
    if (category === 'park') return '1 hour';
    if (category === 'bar') return '1 hour';
    
    return '1 hour';
  }

  calculateRealBudget(dailyPlan, totalBudget) {
    const totalCost = dailyPlan.reduce((sum, block) => {
      return sum + block.items.reduce((itemSum, item) => {
        const cost = parseInt(item.approx_cost.replace('‚Ç¨', '')) || 0;
        return itemSum + cost;
      }, 0);
    }, 0);

    const budgetValue = parseInt(totalBudget) || 0;
    const isWithinBudget = totalCost <= budgetValue * 1.3; // ¬±30% –ø—Ä–∞–≤–∏–ª–æ

    return {
      totalCost,
      totalBudget: budgetValue,
      isWithinBudget,
      deviation: Math.round(((totalCost - budgetValue) / budgetValue) * 100),
      source: 'real_places_calculation'
    };
  }
}

module.exports = CreativeItineraryBuilder;
