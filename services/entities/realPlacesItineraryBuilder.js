/**
 * Real Places Itinerary Builder
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Places API
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
 */

const { generateTitle, generateSubtitle, generateWeather, generateLocationDescription, generateLocationTips, generateConceptualPlan } = require('../textGenerator');
const PlacesService = require('../placesService');
const ConceptualPlanGenerator = require('./conceptualPlanGenerator');
const ConceptualMatcher = require('./conceptualMatcher');

class RealPlacesItineraryBuilder {
  constructor() {
    this.placesService = new PlacesService();
    this.conceptualGenerator = new ConceptualPlanGenerator();
    this.conceptualMatcher = new ConceptualMatcher();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.hasGoogleKey = !!(process.env.GOOGLE_MAPS_KEY || process.env.GOOGLE_PLACES_API_KEY);
    this.hasOpenAIKey = !!process.env.OPENAI_API_KEY;
    
    console.log('üîë RealPlacesBuilder initialized:');
    console.log(`   Google API: ${this.hasGoogleKey ? '‚úÖ' : '‚ùå'}`);
    console.log(`   OpenAI API: ${this.hasOpenAIKey ? '‚úÖ' : '‚ùå'}`);
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ + –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
   */
  async buildRealItinerary(filterParams) {
    console.log('üåç REAL PLACES ITINERARY BUILDER WITH CONCEPTUAL PLANNING');
    console.log('üìã Filter params:', filterParams);

    try {
      // –®–ê–ì 0: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ OpenAI (–ù–û–í–û–ï!)
      let conceptualPlan = null;
      try {
        if (this.hasOpenAIKey) {
          conceptualPlan = await this.conceptualGenerator.generateConceptualPlan(filterParams);
          console.log('üé® Conceptual plan created:', conceptualPlan.concept);
        } else {
          console.log('‚ö†Ô∏è OpenAI not available, using standard approach');
        }
      } catch (conceptError) {
        console.log('‚ö†Ô∏è Conceptual plan failed, using fallback approach:', conceptError.message);
      }

      // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã
      const [title, subtitle, weather] = await Promise.all([
        generateTitle(filterParams.city, filterParams.interests, filterParams.audience),
        generateSubtitle(filterParams.city, filterParams.interests, filterParams.audience, filterParams.date),
        generateWeather(filterParams.city, filterParams.interests, filterParams.date)
      ]);

      console.log('‚ú® Texts generated:', { title });

      // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ (—Å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏–ª–∏ –±–µ–∑)
      const realPlaces = conceptualPlan 
        ? await this.findRealPlacesWithConcept(conceptualPlan, filterParams)
        : await this.getRealPlaces(filterParams);
      
      console.log(`üåç Found ${realPlaces.length} real places`);

      if (realPlaces.length === 0) {
        throw new Error(`No real places found for ${filterParams.city}. Google Places API returned no results.`);
      }

      if (realPlaces.length < 3) {
        console.log(`‚ö†Ô∏è Only ${realPlaces.length} places found, but continuing...`);
      }

      // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–Ω—è (—Å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏–ª–∏ –±–µ–∑)
      const dailyPlan = conceptualPlan
        ? await this.createConceptualDayPlan(conceptualPlan, realPlaces, filterParams)
        : await this.createRealDayPlan(realPlaces, filterParams);
      
      console.log(`üìÖ Created plan with ${dailyPlan.length} activities`);

      // –®–∞–≥ 4: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç
      const budget = this.calculateBudget(dailyPlan, filterParams.budget);

      // –®–∞–≥ 5: –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
      return {
        meta: {
          city: filterParams.city,
          date: filterParams.date,
          audience: filterParams.audience,
          interests: filterParams.interests,
          budget: filterParams.budget,
          generated_at: new Date().toISOString(),
          architecture: conceptualPlan ? 'real_places_with_concept' : 'real_places_only',
          data_source: 'google_places_api',
          hasConceptualPlan: !!conceptualPlan
        },
        title: this.cleanText(title),
        subtitle: this.cleanText(subtitle),
        weather: {
          forecast: this.cleanText(weather.forecast || weather),
          clothing: this.cleanText(weather.clothing || ''),
          tips: this.cleanText(weather.tips || '')
        },
        budget: budget,
        conceptual_plan: conceptualPlan?.concept || null, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç
        daily_plan: [{
          blocks: dailyPlan
        }]
      };

    } catch (error) {
      console.error('‚ùå Real places itinerary error:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏–∑ Google Places API
   */
  async getRealPlaces(filterParams) {
    const allPlaces = [];
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchQueries = [
      `restaurant in ${filterParams.city}`,
      `cafe in ${filterParams.city}`,
      `tourist attraction in ${filterParams.city}`,
      `museum in ${filterParams.city}`,
      `park in ${filterParams.city}`
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    filterParams.interests.forEach(interest => {
      if (interest === 'romantic') {
        searchQueries.push(`romantic restaurant in ${filterParams.city}`);
        searchQueries.push(`scenic view in ${filterParams.city}`);
      }
      if (interest === 'culture') {
        searchQueries.push(`museum in ${filterParams.city}`);
        searchQueries.push(`art gallery in ${filterParams.city}`);
      }
      if (interest === 'architecture') {
        searchQueries.push(`historic building in ${filterParams.city}`);
        searchQueries.push(`landmark in ${filterParams.city}`);
      }
    });

    console.log('üîç Search queries:', searchQueries);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
    for (const query of searchQueries) {
      try {
        const places = await this.searchPlacesByText(query);
        console.log(`üìç Query "${query}": ${places.length} places`);
        allPlaces.push(...places);
      } catch (error) {
        console.error(`‚ùå Error searching "${query}":`, error.message);
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    const uniquePlaces = this.removeDuplicates(allPlaces);
    const filteredPlaces = this.filterPlaces(uniquePlaces, filterParams);
    
    console.log(`üéØ Final: ${filteredPlaces.length} unique real places`);
    return filteredPlaces;
  }

  /**
   * –ù–ê–î–ï–ñ–ù–´–ô –ø–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
   */
  async searchPlacesByText(query) {
    try {
      console.log(`üîç Searching: "${query}"`);
      
      const response = await this.placesService.client.textSearch({
        params: {
          query: query,
          key: this.placesService.apiKey,
          language: 'en'
        }
      });

      if (!response.data?.results || response.data.results.length === 0) {
        console.log(`‚ùå No results for "${query}"`);
        return [];
      }

      console.log(`‚úÖ Found ${response.data.results.length} results for "${query}"`);

      // –ë–ï–ó–û–ü–ê–°–ù–û–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      const places = [];
      for (const place of response.data.results.slice(0, 5)) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          if (!place.name || !place.place_id) {
            console.log(`‚ö†Ô∏è Skipping place with missing name or place_id`);
            continue;
          }

          const formattedPlace = {
            name: place.name,
            address: place.formatted_address || place.vicinity || 'Address not available',
            rating: parseFloat(place.rating) || 0,
            price_level: parseInt(place.price_level) || 2,
            place_id: place.place_id,
            types: Array.isArray(place.types) ? place.types : [],
            geometry: place.geometry || {},
            user_ratings_total: parseInt(place.user_ratings_total) || 0,
            opening_hours: place.opening_hours || {},
            lat: place.geometry?.location?.lat || 0,
            lng: place.geometry?.location?.lng || 0,
            photos: [], // –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            category: this.determineCategory(place.types || [])
          };

          places.push(formattedPlace);
          console.log(`‚úÖ Formatted: ${formattedPlace.name} (${formattedPlace.category})`);

        } catch (formatError) {
          console.error(`‚ùå Error formatting place ${place.name}:`, formatError.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Å—Ç–∞–º–∏
        }
      }

      return places;

    } catch (error) {
      console.error(`‚ùå Search error for "${query}":`, error.message);
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
   */
  determineCategory(types) {
    if (types.includes('restaurant') || types.includes('meal_takeaway')) return 'restaurant';
    if (types.includes('cafe') || types.includes('bakery')) return 'cafe';
    if (types.includes('museum')) return 'museum';
    if (types.includes('park')) return 'park';
    if (types.includes('bar') || types.includes('night_club')) return 'bar';
    if (types.includes('tourist_attraction')) return 'attraction';
    if (types.includes('amusement_park')) return 'amusement';
    if (types.includes('zoo')) return 'zoo';
    
    return 'attraction'; // –î–µ—Ñ–æ–ª—Ç
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
   */
  removeDuplicates(places) {
    const seen = new Set();
    return places.filter(place => {
      const id = place.place_id || place.name;
      if (seen.has(id)) return false;
      seen.add(id);
      return true;
    });
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–µ—Å—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
   */
  filterPlaces(places, filterParams) {
    let filtered = places;

    // –§–∏–ª—å—Ç—Ä –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if (filterParams.audience === 'kids') {
      filtered = filtered.filter(place => 
        !place.types.some(type => ['bar', 'night_club', 'casino'].includes(type))
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    filtered = filtered.filter(place => place.rating >= 3.5);

    // –£–ú–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
    const budgetValue = parseInt(filterParams.budget) || 100;
    const maxBudget = budgetValue * 1.3; // +30%
    const averageCostPerActivity = maxBudget / 9; // 9 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –¥–µ–Ω—å
    
    console.log(`üí∞ Budget filtering: max ${maxBudget}‚Ç¨ total, ~${Math.round(averageCostPerActivity)}‚Ç¨ per activity`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞
    filtered = filtered.filter(place => {
      const avgCost = this.getAverageCost(place.price_level || 2, place.category);
      const isAffordable = avgCost <= averageCostPerActivity * 2; // –ü–æ–∑–≤–æ–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –±—ã—Ç—å –¥–æ—Ä–æ–∂–µ
      
      if (!isAffordable) {
        console.log(`üí∏ Filtered out ${place.name}: ${avgCost}‚Ç¨ > ${Math.round(averageCostPerActivity * 2)}‚Ç¨`);
      }
      
      return isAffordable;
    });

    console.log(`üí∞ Budget filter: ${places.length} ‚Üí ${filtered.length} places`);
    return filtered;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –¥–Ω—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç (9:00 - 21:30)
   */
  async createRealDayPlan(realPlaces, filterParams) {
    const timeSlots = [
      { time: "09:00", category: "cafe", title: "Morning Coffee" },
      { time: "10:00", category: "attraction", title: "Morning Discovery" },
      { time: "11:30", category: "attraction", title: "Cultural Experience" },
      { time: "13:00", category: "restaurant", title: "Lunch" },
      { time: "14:30", category: "attraction", title: "Afternoon Exploration" },
      { time: "16:00", category: "attraction", title: "Scenic Activity" },
      { time: "17:30", category: "cafe", title: "Coffee Break" },
      { time: "19:00", category: "restaurant", title: "Dinner" },
      { time: "21:00", category: "bar", title: "Evening Drinks" }
    ];

    const usedPlaces = new Set();
    const dailyPlan = [];

    for (const slot of timeSlots) {
      console.log(`üéØ Processing slot ${slot.time} - ${slot.category}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞
      let suitablePlaces = realPlaces.filter(place => 
        place.category === slot.category && 
        !usedPlaces.has(place.place_id)
      );

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
      if (suitablePlaces.length === 0) {
        suitablePlaces = realPlaces.filter(place => 
          this.isSimilarCategory(place.category, slot.category) && 
          !usedPlaces.has(place.place_id)
        );
      }

      if (suitablePlaces.length === 0) {
        console.log(`‚ö†Ô∏è No places for slot ${slot.time}`);
        continue;
      }

      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ
      const selectedPlace = suitablePlaces.sort((a, b) => b.rating - a.rating)[0];
      usedPlaces.add(selectedPlace.place_id);

      console.log(`‚úÖ Selected: ${selectedPlace.name} (${selectedPlace.rating}‚≠ê)`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã
      const [description, tips] = await Promise.all([
        generateLocationDescription(
          selectedPlace.name,
          selectedPlace.address,
          selectedPlace.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `Discover the charm of ${selectedPlace.name}.`),
        generateLocationTips(
          selectedPlace.name,
          selectedPlace.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `Perfect place to experience local culture.`)
      ]);

      dailyPlan.push({
        time: slot.time,
        title: slot.title,
        items: [{
          title: selectedPlace.name,
          why: this.cleanText(description),
          address: selectedPlace.address,
          lat: selectedPlace.lat,
          lng: selectedPlace.lng,
          approx_cost: this.formatCost(selectedPlace.price_level, selectedPlace.category),
          tips: this.cleanText(tips),
          duration: this.getDuration(selectedPlace.category),
          photos: await this.getSimplePhotos(selectedPlace),
          rating: selectedPlace.rating,
          place_id: selectedPlace.place_id,
          source: 'google_places_real'
        }]
      });
    }

    return dailyPlan;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  isSimilarCategory(placeCategory, slotCategory) {
    const similarCategories = {
      'cafe': ['restaurant', 'attraction'],
      'restaurant': ['cafe', 'attraction'],
      'attraction': ['museum', 'park', 'cafe'],
      'museum': ['attraction', 'park'],
      'park': ['attraction', 'museum']
    };

    return similarCategories[slotCategory]?.includes(placeCategory) || false;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  cleanText(text) {
    if (!text) return text;
    return text.replace(/^[\"']|[\"']$/g, '').trim();
  }

  getMaxPriceLevel(budget) {
    const budgetValue = parseInt(budget) || 100;
    if (budgetValue < 100) return 2;
    if (budgetValue < 300) return 3;
    return 4;
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç Google price_level –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
   * Google: 0=Free, 1=Inexpensive, 2=Moderate, 3=Expensive, 4=Very Expensive
   */
  formatCost(priceLevel, category) {
    // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const basePrices = {
      'cafe': { 0: '0‚Ç¨', 1: '5-8‚Ç¨', 2: '10-15‚Ç¨', 3: '18-25‚Ç¨', 4: '30-40‚Ç¨' },
      'restaurant': { 0: '0‚Ç¨', 1: '12-18‚Ç¨', 2: '20-35‚Ç¨', 3: '40-65‚Ç¨', 4: '70-120‚Ç¨' },
      'attraction': { 0: '0‚Ç¨', 1: '5-10‚Ç¨', 2: '12-20‚Ç¨', 3: '25-40‚Ç¨', 4: '50-80‚Ç¨' },
      'museum': { 0: '0‚Ç¨', 1: '8-12‚Ç¨', 2: '15-25‚Ç¨', 3: '30-45‚Ç¨', 4: '50-70‚Ç¨' },
      'park': { 0: '0‚Ç¨', 1: '0‚Ç¨', 2: '5-10‚Ç¨', 3: '15-25‚Ç¨', 4: '30-50‚Ç¨' },
      'bar': { 0: '0‚Ç¨', 1: '8-12‚Ç¨', 2: '15-25‚Ç¨', 3: '30-50‚Ç¨', 4: '60-100‚Ç¨' }
    };
    
    const categoryPrices = basePrices[category] || basePrices['attraction'];
    return categoryPrices[priceLevel] || categoryPrices[2];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞
   */
  getAverageCost(priceLevel, category) {
    const averageCosts = {
      'cafe': { 0: 0, 1: 6, 2: 12, 3: 21, 4: 35 },
      'restaurant': { 0: 0, 1: 15, 2: 27, 3: 52, 4: 95 },
      'attraction': { 0: 0, 1: 7, 2: 16, 3: 32, 4: 65 },
      'museum': { 0: 0, 1: 10, 2: 20, 3: 37, 4: 60 },
      'park': { 0: 0, 1: 0, 2: 7, 3: 20, 4: 40 },
      'bar': { 0: 0, 1: 10, 2: 20, 3: 40, 4: 80 }
    };
    
    const categoryAverages = averageCosts[category] || averageCosts['attraction'];
    return categoryAverages[priceLevel] || categoryAverages[2];
  }

  getDuration(category) {
    const durations = {
      'restaurant': '1.5 hours',
      'cafe': '1 hour',
      'museum': '2 hours',
      'attraction': '1.5 hours',
      'park': '1 hour'
    };
    return durations[category] || '1 hour';
  }

  /**
   * –ù–ê–î–ï–ñ–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ç—Ä–æ–π–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
   */
  async getSimplePhotos(place) {
    try {
      console.log(`üì∏ Getting photos for: ${place.name} (${place.place_id})`);
      
      // –ü–û–ü–´–¢–ö–ê 1: –†–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ Google Places
      if (place.place_id) {
        try {
          const photos = await this.placesService.getPlacePhotos(place.place_id);
          if (photos && Array.isArray(photos) && photos.length > 0) {
            console.log(`‚úÖ Got ${photos.length} real photos for ${place.name}`);
            return photos;
          }
        } catch (photoError) {
          console.log(`‚ö†Ô∏è Real photos failed for ${place.name}: ${photoError.message}`);
        }
      }
      
      // –ü–û–ü–´–¢–ö–ê 2: –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      console.log(`üì∏ Using category photos for ${place.name} (${place.category})`);
      return this.getCategoryPhotos(place.category);
      
    } catch (error) {
      console.error(`‚ùå All photo methods failed for ${place.name}:`, error.message);
      
      // –ü–û–ü–´–¢–ö–ê 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ fallback —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      return [{
        url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop&q=80',
        thumbnail: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=200&h=150&fit=crop&q=80',
        source: 'emergency_fallback'
      }];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategoryPhotos(category) {
    const categoryPhotos = {
      'restaurant': [
        'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=800&h=600&fit=crop&q=80',
        'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=800&h=600&fit=crop&q=80'
      ],
      'cafe': [
        'https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=800&h=600&fit=crop&q=80',
        'https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=800&h=600&fit=crop&q=80'
      ],
      'attraction': [
        'https://images.unsplash.com/photo-1539650116574-75c0c6d73c6e?w=800&h=600&fit=crop&q=80',
        'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop&q=80'
      ],
      'museum': [
        'https://images.unsplash.com/photo-1555529669-2269763671c0?w=800&h=600&fit=crop&q=80',
        'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800&h=600&fit=crop&q=80'
      ],
      'park': [
        'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop&q=80',
        'https://images.unsplash.com/photo-1488646953014-85cb44e25828?w=800&h=600&fit=crop&q=80'
      ]
    };

    const photos = categoryPhotos[category] || categoryPhotos['attraction'];
    return photos.map(url => ({
      url,
      thumbnail: url.replace('w=800&h=600', 'w=200&h=150'),
      source: 'unsplash'
    }));
  }

  calculateBudget(dailyPlan, totalBudget) {
    let totalCost = 0;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
    dailyPlan.forEach(block => {
      block.items.forEach(item => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
        const costStr = item.approx_cost;
        if (costStr === '0‚Ç¨') {
          totalCost += 0;
        } else if (costStr.includes('-')) {
          // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          const [min, max] = costStr.replace('‚Ç¨', '').split('-').map(x => parseInt(x.trim()));
          totalCost += Math.round((min + max) / 2);
        } else {
          // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
          totalCost += parseInt(costStr.replace('‚Ç¨', '')) || 0;
        }
      });
    });

    const budgetValue = parseInt(totalBudget) || 0;
    const minBudget = budgetValue * 0.7; // -30%
    const maxBudget = budgetValue * 1.3; // +30%
    
    const isWithinBudget = totalCost >= minBudget && totalCost <= maxBudget;
    const deviation = Math.round(((totalCost - budgetValue) / budgetValue) * 100);

    console.log(`üí∞ Budget calculation: ${totalCost}‚Ç¨ (target: ${budgetValue}‚Ç¨, range: ${minBudget}-${maxBudget}‚Ç¨)`);

    return {
      totalCost,
      totalBudget: budgetValue,
      isWithinBudget,
      deviation,
      minBudget,
      maxBudget,
      source: 'realistic_calculation'
    };
  }

  /**
   * –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–¶–ï–ü–¢–£–ê–õ–¨–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
   */

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
   */
  async findRealPlacesWithConcept(conceptualPlan, filterParams) {
    console.log('üéØ Finding real places with conceptual guidance...');
    
    const allPlaces = [];
    const processedQueries = new Set();

    // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    for (const slot of conceptualPlan.timeSlots) {
      const smartQueries = this.conceptualMatcher.buildSmartQueries(slot, filterParams.city);
      
      for (const query of smartQueries) {
        if (processedQueries.has(query)) continue;
        processedQueries.add(query);
        
        try {
          const places = await this.searchPlacesByText(query);
          console.log(`üîç Query "${query}": ${places.length} places`);
          
          // –û–±–æ–≥–∞—â–∞–µ–º –º–µ—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–º —Å–ª–æ—Ç–µ
          const enrichedPlaces = places.map(place => ({
            ...place,
            sourceQuery: query,
            conceptualSlot: slot.time,
            conceptualActivity: slot.activity
          }));
          
          allPlaces.push(...enrichedPlaces);
        } catch (error) {
          console.error(`‚ùå Error searching "${query}":`, error.message);
        }
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniquePlaces = this.removeDuplicates(allPlaces);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –º–µ—Å—Ç–∞ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–∫–æ—Ä–∞–º–∏
    const enrichedPlaces = this.conceptualMatcher.enrichPlacesWithConcepts(uniquePlaces, conceptualPlan);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const filteredPlaces = this.filterPlaces(enrichedPlaces, filterParams);
    
    console.log(`üéØ Conceptual search result: ${filteredPlaces.length} places with concept matching`);
    return filteredPlaces;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
   */
  async createConceptualDayPlan(conceptualPlan, realPlaces, filterParams) {
    console.log('üé® Creating conceptual day plan...');
    
    const dailyPlan = [];
    const usedPlaces = new Set();

    for (const conceptSlot of conceptualPlan.timeSlots) {
      console.log(`üéØ Processing conceptual slot ${conceptSlot.time} - ${conceptSlot.activity}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
      let suitablePlaces = realPlaces.filter(place => 
        place.conceptSlot === conceptSlot.time && 
        !usedPlaces.has(place.place_id)
      );

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–æ–º
      if (suitablePlaces.length === 0) {
        suitablePlaces = realPlaces.filter(place => 
          place.category === conceptSlot.category && 
          place.matchScore > 50 &&
          !usedPlaces.has(place.place_id)
        );
      }

      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
      if (suitablePlaces.length === 0) {
        suitablePlaces = realPlaces.filter(place => 
          place.category === conceptSlot.category && 
          !usedPlaces.has(place.place_id)
        );
      }

      if (suitablePlaces.length === 0) {
        console.log(`‚ö†Ô∏è No suitable places for conceptual slot ${conceptSlot.time}`);
        continue;
      }

      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ (–ø–æ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–º—É —Å–∫–æ—Ä—É, –∑–∞—Ç–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É)
      const selectedPlace = suitablePlaces.sort((a, b) => {
        if (a.matchScore && b.matchScore) {
          return b.matchScore - a.matchScore;
        }
        return b.rating - a.rating;
      })[0];

      usedPlaces.add(selectedPlace.place_id);

      console.log(`‚úÖ Selected for concept "${conceptSlot.activity}": ${selectedPlace.name} (score: ${selectedPlace.matchScore || 'N/A'})`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
      const [description, tips] = await Promise.all([
        generateLocationDescription(
          selectedPlace.name,
          selectedPlace.address,
          selectedPlace.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `${conceptSlot.description} at ${selectedPlace.name}.`),
        generateLocationTips(
          selectedPlace.name,
          selectedPlace.category,
          filterParams.interests,
          filterParams.audience
        ).catch(() => `Perfect for ${conceptSlot.activity.toLowerCase()}.`)
      ]);

      dailyPlan.push({
        time: conceptSlot.time,
        title: conceptSlot.activity, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        conceptualDescription: conceptSlot.description, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        items: [{
          title: selectedPlace.name,
          why: this.cleanText(description),
          address: selectedPlace.address,
          lat: selectedPlace.lat,
          lng: selectedPlace.lng,
          approx_cost: this.formatCost(selectedPlace.price_level, selectedPlace.category),
          tips: this.cleanText(tips),
          duration: this.getDuration(selectedPlace.category),
          photos: await this.getSimplePhotos(selectedPlace),
          rating: selectedPlace.rating,
          place_id: selectedPlace.place_id,
          source: 'google_places_conceptual',
          conceptualScore: selectedPlace.matchScore || 0
        }]
      });
    }

    console.log(`üé® Conceptual day plan created with ${dailyPlan.length} activities`);
    return dailyPlan;
  }
}

module.exports = RealPlacesItineraryBuilder;
